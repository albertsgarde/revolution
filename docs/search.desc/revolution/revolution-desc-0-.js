searchState.loadedDescShard("revolution", 0, "Contains a fixed (compile-time known) amount of a resource.\nHolds an arbitrary amount of a resource. A <code>Resource</code> object …\nThe tick is used to keep track of time in the game. You …\nConsumes a <code>Bundle</code> of the same resource type and adds the …\nThe current amount of the resource contained in this …\nBuildings take inputs to produce outputs over time.\nTakes a specified amount of resources from this <code>Resource</code> …\nReturns the current tick number.\nCreates a new empty <code>Resource</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMines copper ore. Takes 2 ticks to mine 1 ore.\nMines iron ore. Takes 2 ticks to mine 1 ore.\nAdvances the game by one tick.\nRuns your play. If it is run multiple times, it will …\nA recipe is a way of turning resources into other …\nSplits the <code>Resource</code> into two smaller parts. If there are …\nConverts this <code>Bundle</code> into a <code>Resource</code> with the same …\nThe assembler is used for recipes that require two …\nThe furnace is used to smelt ores into base resources.\nBuilds an assembler. Costs 15 iron and 10 copper.\nBuilds a furnace. Costs 10 iron.\nChanges the <code>Recipe</code> of the assembler. Returns the original …\nChanges the <code>Recipe</code> of the furnace. Returns the original …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAny recipe that implements this trait can be used in an …\nA <code>Furnace</code> recipe that smelts copper ore into copper. …\nAny recipe that implements this trait can be used in a …\nA <code>Furnace</code> recipe that smelts iron ore into iron. Converts …\nThe recipe you need to win! An <code>Assembler</code> recipe that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")